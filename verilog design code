module voting_machine #(
    parameter idle = 2'b00,     // states and their corresponding numbers 
    parameter vote = 2'b01, 
    parameter hold = 2'b10, 
    parameter finish = 2'b11 
)(
    input clk,
    input rst,                   // input High to reset counting (active high)
    input i_candidate_1,         // input to vote for candidate 1 
    input i_candidate_2,         // input to vote for candidate 2 
    input i_candidate_3,         // input to vote for candidate 3 
    input i_voting_over,         // input high to get total votes after voting is over
    output reg [31:0] o_count1, // output for total number of votes of candidate 1 
    output reg [31:0] o_count2, // output for total number of votes of candidate 2 
    output reg [31:0] o_count3  // output for total number of votes of candidate 3 
);

    // Internal registers
    reg r_cand1_prev;           // store previous value of input for candidate 1 
    reg r_cand2_prev;           // store previous value of input for candidate 2 
    reg r_cand3_prev;           // store previous value of input for candidate 3 

    reg [31:0] r_counter_1;    // counting register for candidate 1 
    reg [31:0] r_counter_2;    // counting register for candidate 2 
    reg [31:32] r_counter_3;    // counting register for candidate 3 

    reg [1:0] r_present_state, r_next_state;  // present state and next state registers
    reg [3:0] r_hold_count;                   // counter for hold state 

    // Sequential block for state and register updates
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            r_present_state <= idle;
            r_counter_1 <= 32'b0;
            r_counter_2 <= 32'b0;
            r_counter_3 <= 32'b0;
            r_hold_count <= 4'b0000;
            r_cand1_prev <= 1'b0;
            r_cand2_prev <= 1'b0;
            r_cand3_prev <= 1'b0;
        end else begin
            r_present_state <= r_next_state;

            // Update candidate previous values for edge detection
            r_cand1_prev <= i_candidate_1;
            r_cand2_prev <= i_candidate_2;
            r_cand3_prev <= i_candidate_3;

            // Update counters if in the vote state
            if (r_present_state == vote) begin
                if (i_candidate_1 == 1'b0 && r_cand1_prev == 1'b1) 
                    r_counter_1 <= r_counter_1 + 1;
                if (i_candidate_2 == 1'b0 && r_cand2_prev == 1'b1) 
                    r_counter_2 <= r_counter_2 + 1;
                if (i_candidate_3 == 1'b0 && r_cand3_prev == 1'b1) 
                    r_counter_3 <= r_counter_3 + 1;
            end
        end
    end

    // Sequential block for output count updates
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            o_count1 <= 32'b0;
            o_count2 <= 32'b0;
            o_count3 <= 32'b0;
        end else if (i_voting_over) begin
            o_count1 <= r_counter_1;
            o_count2 <= r_counter_2;
            o_count3 <= r_counter_3;
        end
    end

    // Combinational block for state transitions
    always @(*) begin
        case (r_present_state)
            idle: begin
                r_next_state = (rst) ? idle : vote;
            end

            vote: begin
                if (i_voting_over) begin
                    r_next_state = finish;
                end else if (i_candidate_1 == 1'b0 && r_cand1_prev == 1'b1) begin
                    r_next_state = hold;
                end else if (i_candidate_2 == 1'b0 && r_cand2_prev == 1'b1) begin
                    r_next_state = hold;
                end else if (i_candidate_3 == 1'b0 && r_cand3_prev == 1'b1) begin
                    r_next_state = hold;
                end else begin
                    r_next_state = vote;
                end
            end

            hold: begin
                if (i_voting_over) begin
                    r_next_state = finish;
                end else if (r_hold_count != 4'b1111) begin
                    r_hold_count <= r_hold_count + 1;
                    r_next_state = hold;
                end else begin
                    r_next_state = vote;
                end
            end

            finish: begin
                r_next_state = (i_voting_over) ? finish : idle;
            end

            default: begin
                r_next_state = idle;
            end
        endcase
    end

endmodule
